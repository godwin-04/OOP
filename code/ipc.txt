Example on sum of array
classsumthread implements Runnable
{
int[] a;

int total;
Thread t;
sumthread(int[] ob){
t=new Thread(this);
a=ob;
}
@Override
public void run()
{
total=0;
for(int i=0;i<a.length;i++)
{
total+= a[i];
}
System.out.println(t.getName()+ " completed");
}
}
public class threaddemo3 {
public static void main(String ar[]) throws InterruptedException {
int[][] a={{1,2,3},{2,3,4},{4,5,6}};
sumthread t1=new sumthread(a[0]);
sumthread t2=new sumthread(a[1]);
sumthread t3=new sumthread(a[2]);
t1.t.start();
t2.t.start();
t3.t.start();
if(t1.t.isAlive())
{
System.out.println("waiting for thread0 to join");
t1.t.join();
System.out.println("thread 0 joined");
}
if(t2.t.isAlive())
{
System.out.println("waiting for thread1 to join");
t2.t.join();
System.out.println("thread 1 joined");
}
if(t3.t.isAlive())
{
System.out.println("waiting for thread2 to join");
t3.t.join();
System.out.println("thread 2 joined");
}
int sum=t1.total +t2.total+t3.total;
System.out.println("sum of matrix is" + sum);
}
}
OUTPUT:
Thread-1 completed
Thread-2 completed

Thread-0 completed
waiting for thread0 to join
thread 0 joined
sum of matrix is30
Synchronize (Refer Complete Reference)
class callme
{
synchronized void call(String s) {
try{
System.out.print("["+s);
Thread.sleep(1000);
System.out.println("]");
}catch(InterruptedException e){
System.out.println("interrupted");
} } }
class caller implements Runnable{
String s;
callme ob;
Thread t;
caller(callme ob,String s) {
this.ob=ob;
this.s=s;
t=new Thread(this);
t.start();
}
@Override
public void run() {
synchronized(ob){
ob.call(s);
}
}
}
public class threadsync {
public static void main(String a[]){
callme c=new callme();
caller t1=new caller(c, "hello");
caller t2=new caller(c, "world");
}
}

Dining Philosopher Problem
class Table
{
private boolean[] usedFork;
public Table(int numberForks)
{
usedFork = new boolean[numberForks];
for(int i = 0; i <usedFork.length; i++)
usedFork[i] = false;

}
private int left(int i)
{
return i;
}
private int right(int i)
{
return ((i+1)%usedFork.length);
}
public synchronized void takeForks(int place)
{
while(usedFork[left(place)]|| usedFork[right(place)])
{
try {
wait();
} catch(InterruptedException e) {}
}
usedFork[left(place)] = true;
usedFork[right(place)] = true;
}
public synchronized void putBackForks(int place)
{
usedFork[left(place)]= false;
usedFork[right(place)] = false;
notifyAll();
}
} // table
class Philosoph extends Thread {
private Table Table;//shared memory
private int place;
public Philosoph(Table Table, int place)
{
this.Table = Table;
this.place = place;
start();
}
public void run()
{ // life of a philosopher
while(true) {

thinking(place);
Table.takeForks(place);
eating(place);
Table.putBackForks(place);

}
}
private void thinking(int place)
{

System.out.println("Philosoph " + place + " thinking.");
try {
sleep((int)(Math.random() * 2000));
}
catch(InterruptedException e) {e.printStackTrace();}

}
private void eating(int place) {

System.out.println("Philosoph " + place + " starts eating.");
try {
sleep((int)(Math.random() * 20000));
} catch(InterruptedException e) { e.printStackTrace();}
System.out.println("Philosoph " + place + " finished eating.");

}
}
class Philosophers
{
private static final int numberPhilisophers = 5;
private static final int numberForks=5;
public static void main(String[] args) {
Table Table = new Table(numberForks);
for(int i = 0; i <numberPhilisophers; i++)
newPhilosoph(Table, i);
}}

Producer Consumer
importjava.util.*;
public class producerconsumer1 {
public static void main(String[] args) throws InterruptedException {
ArrayList<Integer> queue=new ArrayList<>();
int size=5;
consumer c=new consumer(queue, size);
Thread pthread=new Thread(new producer(queue, size), "producer");
Thread cthread=new Thread(c, "consumer");
pthread.start();
Thread.currentThread().sleep(10);
cthread.start();
}
}
class producer implements Runnable{
ArrayList<Integer> queue=new ArrayList<>();
final int size;
public producer(ArrayList<Integer> queue, int size) {
this.queue=queue;
this.size=size;
}
@Override
public void run() {
for(int i=0;i<7;i++) {
if(queue.size()==size) // checks for queue full
{
synchronized(queue)
{
System.out.println("queue is full producer is waiting" );
try {
queue.wait();
} catch (InterruptedException ex) {
System.out.println("interrupted"); }
}
}
synchronized(queue)
{
System.out.println("produced " + i + queue.add(i));
queue.notifyAll();
}
}
}
}
class consumer implements Runnable{
ArrayList<Integer> queue;
final int size;
boolean flag=true;
public consumer(ArrayList<Integer> queue, int size) {
this.queue=queue;
this.size=size;

}
@Override
public void run() {
while(true){
while(queue.isEmpty())
{
synchronized(queue){
try {
queue.wait();
} catch (InterruptedException ex) {
System.out.println("interrupted");
}
}
}
synchronized(queue)
{
queue.notifyAll();
int k=queue.remove(0);
System.out.println("consumed " + k);
}
}} }